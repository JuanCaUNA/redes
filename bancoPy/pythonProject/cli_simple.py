#!/usr/bin/env python3
"""
Interfaz de Terminal Mejorada para el Sistema Bancario SINPE
Versi√≥n simple que funciona sin dependencias gr√°ficas
"""

import os
import sys
import time
import subprocess
import json
from datetime import datetime


class SimpleBankingCLI:
    def __init__(self):
        self.api_url = "http://localhost:5000"
        self.server_process = None

    def clear_screen(self):
        """Limpiar pantalla"""
        os.system("cls" if os.name == "nt" else "clear")

    def print_header(self):
        """Mostrar cabecera"""
        print("=" * 60)
        print("üè¶ SISTEMA BANCARIO SINPE - INTERFAZ SIMPLE")
        print("=" * 60)
        print()

    def print_menu(self, title, options):
        """Mostrar men√∫"""
        print(f"\nüìã {title}")
        print("-" * 40)
        for i, option in enumerate(options, 1):
            print(f"{i}. {option}")
        print("0. Volver/Salir")
        print()

    def get_input(self, prompt, required=True):
        """Obtener entrada del usuario"""
        while True:
            value = input(f"{prompt}: ").strip()
            if value or not required:
                return value
            print("‚ùå Este campo es obligatorio")

    def show_message(self, message, msg_type="info"):
        """Mostrar mensaje"""
        icons = {"info": "‚ÑπÔ∏è", "success": "‚úÖ", "error": "‚ùå", "warning": "‚ö†Ô∏è"}
        icon = icons.get(msg_type, "‚ÑπÔ∏è")
        print(f"\n{icon} {message}")
        input("\nPresione Enter para continuar...")

    def check_server_simple(self):
        """Verificaci√≥n simple del servidor"""
        try:
            # Intentar hacer una petici√≥n simple usando subprocess
            result = subprocess.run(
                [
                    sys.executable,
                    "-c",
                    "import urllib.request; urllib.request.urlopen('http://localhost:5000/health', timeout=2)",
                ],
                capture_output=True,
                timeout=3,
            )
            return result.returncode == 0
        except:
            return False

    def start_server(self):
        """Iniciar servidor"""
        if self.check_server_simple():
            self.show_message("El servidor ya est√° ejecut√°ndose", "warning")
            return

        print("üöÄ Iniciando servidor...")
        try:
            self.server_process = subprocess.Popen(
                [sys.executable, "main.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            print("‚è≥ Esperando que el servidor se inicie...")
            time.sleep(5)

            if self.check_server_simple():
                self.show_message("Servidor iniciado correctamente", "success")
            else:
                self.show_message(
                    "El servidor pudo no haberse iniciado correctamente", "warning"
                )

        except Exception as e:
            self.show_message(f"Error al iniciar servidor: {e}", "error")

    def api_call_simple(self, endpoint, method="GET", data=None):
        """Llamada simple a la API usando subprocess"""
        try:
            if method == "GET":
                script = f"""
import urllib.request
import json
try:
    response = urllib.request.urlopen('http://localhost:5000{endpoint}', timeout=5)
    data = json.loads(response.read().decode())
    print(json.dumps(data))
except Exception as e:
    print('{{"error": "' + str(e) + '"}}')
"""
            else:  # POST
                json_data = json.dumps(data) if data else "{}"
                script = f"""
import urllib.request
import json
try:
    data = '{json_data}'
    req = urllib.request.Request('http://localhost:5000{endpoint}', 
                               data=data.encode(),
                               headers={{'Content-Type': 'application/json'}})
    response = urllib.request.urlopen(req, timeout=5)
    result = json.loads(response.read().decode())
    print(json.dumps(result))
except Exception as e:
    print('{{"error": "' + str(e) + '"}}')
"""

            result = subprocess.run(
                [sys.executable, "-c", script],
                capture_output=True,
                text=True,
                timeout=10,
            )

            if result.returncode == 0 and result.stdout.strip():
                return json.loads(result.stdout.strip())
            else:
                return {"error": "Error en la petici√≥n"}

        except Exception as e:
            return {"error": str(e)}

    def manage_users(self):
        """Gesti√≥n de usuarios"""
        while True:
            self.clear_screen()
            self.print_header()
            self.print_menu(
                "GESTI√ìN DE USUARIOS",
                ["Crear usuario", "Listar usuarios", "Ver estado del servidor"],
            )

            choice = input("Seleccione una opci√≥n: ").strip()

            if choice == "0":
                break
            elif choice == "1":
                self.create_user()
            elif choice == "2":
                self.list_users()
            elif choice == "3":
                self.server_status()
            else:
                self.show_message("Opci√≥n inv√°lida", "error")

    def create_user(self):
        """Crear usuario"""
        self.clear_screen()
        self.print_header()
        print("üìù CREAR NUEVO USUARIO")
        print("-" * 40)

        data = {
            "name": self.get_input("Nombre"),
            "email": self.get_input("Email"),
            "phone": self.get_input("Tel√©fono"),
            "password": self.get_input("Contrase√±a"),
        }

        print("\n‚è≥ Creando usuario...")
        result = self.api_call_simple("/api/users", "POST", data)

        if result.get("error"):
            self.show_message(f"Error: {result['error']}", "error")
        else:
            self.show_message("Usuario creado correctamente", "success")

    def list_users(self):
        """Listar usuarios"""
        self.clear_screen()
        self.print_header()
        print("üë• LISTA DE USUARIOS")
        print("-" * 40)

        print("‚è≥ Cargando usuarios...")
        result = self.api_call_simple("/api/users")

        if result.get("error"):
            self.show_message(f"Error: {result['error']}", "error")
            return

        users = result.get("data", [])
        if not users:
            print("üì≠ No hay usuarios registrados")
        else:
            for i, user in enumerate(users, 1):
                print(f"\n{i}. Usuario ID: {user['id']}")
                print(f"   Nombre: {user['name']}")
                print(f"   Email: {user['email']}")
                print(f"   Tel√©fono: {user['phone']}")

        input("\nPresione Enter para continuar...")

    def manage_accounts(self):
        """Gesti√≥n de cuentas"""
        while True:
            self.clear_screen()
            self.print_header()
            self.print_menu(
                "GESTI√ìN DE CUENTAS",
                ["Crear cuenta", "Listar cuentas", "Ver estado del servidor"],
            )

            choice = input("Seleccione una opci√≥n: ").strip()

            if choice == "0":
                break
            elif choice == "1":
                self.create_account()
            elif choice == "2":
                self.list_accounts()
            elif choice == "3":
                self.server_status()
            else:
                self.show_message("Opci√≥n inv√°lida", "error")

    def create_account(self):
        """Crear cuenta"""
        self.clear_screen()
        self.print_header()
        print("üè¶ CREAR NUEVA CUENTA")
        print("-" * 40)

        balance = self.get_input("Saldo inicial (default: 1000)")
        if not balance:
            balance = "1000"

        user_id = self.get_input("ID de usuario (opcional)", False)

        data = {"balance": float(balance), "currency": "CRC"}

        if user_id:
            try:
                data["user_id"] = int(user_id)
            except ValueError:
                self.show_message("ID de usuario debe ser un n√∫mero", "error")
                return

        print("\n‚è≥ Creando cuenta...")
        result = self.api_call_simple("/api/accounts", "POST", data)

        if result.get("error"):
            self.show_message(f"Error: {result['error']}", "error")
        else:
            account = result.get("data", {})
            self.show_message(
                f"Cuenta creada: {account.get('number', 'N/A')}", "success"
            )

    def list_accounts(self):
        """Listar cuentas"""
        self.clear_screen()
        self.print_header()
        print("üè¶ LISTA DE CUENTAS")
        print("-" * 40)

        print("‚è≥ Cargando cuentas...")
        result = self.api_call_simple("/api/accounts")

        if result.get("error"):
            self.show_message(f"Error: {result['error']}", "error")
            return

        accounts = result.get("data", [])
        if not accounts:
            print("üì≠ No hay cuentas registradas")
        else:
            for i, account in enumerate(accounts, 1):
                print(f"\n{i}. Cuenta ID: {account['id']}")
                print(f"   N√∫mero: {account['number']}")
                print(f"   Saldo: {account['balance']} {account['currency']}")

        input("\nPresione Enter para continuar...")

    def manage_transfers(self):
        """Gesti√≥n de transferencias"""
        while True:
            self.clear_screen()
            self.print_header()
            self.print_menu(
                "TRANSFERENCIAS",
                [
                    "Realizar transferencia",
                    "Ver transacciones",
                    "Ver estado del servidor",
                ],
            )

            choice = input("Seleccione una opci√≥n: ").strip()

            if choice == "0":
                break
            elif choice == "1":
                self.create_transfer()
            elif choice == "2":
                self.list_transactions()
            elif choice == "3":
                self.server_status()
            else:
                self.show_message("Opci√≥n inv√°lida", "error")

    def create_transfer(self):
        """Crear transferencia"""
        self.clear_screen()
        self.print_header()
        print("üí∏ REALIZAR TRANSFERENCIA")
        print("-" * 40)

        try:
            from_id = int(self.get_input("ID cuenta origen"))
            to_id = int(self.get_input("ID cuenta destino"))
            amount = float(self.get_input("Monto"))
            description = self.get_input("Descripci√≥n (opcional)", False)
        except ValueError:
            self.show_message("IDs deben ser n√∫meros y monto debe ser v√°lido", "error")
            return

        data = {
            "from_account_id": from_id,
            "to_account_id": to_id,
            "amount": amount,
            "description": description or "Transferencia desde interfaz simple",
        }

        print("\n‚è≥ Procesando transferencia...")
        result = self.api_call_simple("/api/transactions", "POST", data)

        if result.get("error"):
            self.show_message(f"Error: {result['error']}", "error")
        else:
            self.show_message("Transferencia realizada correctamente", "success")

    def list_transactions(self):
        """Listar transacciones"""
        self.clear_screen()
        self.print_header()
        print("üìä HISTORIAL DE TRANSACCIONES")
        print("-" * 40)

        print("‚è≥ Cargando transacciones...")
        result = self.api_call_simple("/api/transactions")

        if result.get("error"):
            self.show_message(f"Error: {result['error']}", "error")
            return

        transactions = result.get("data", [])
        if not transactions:
            print("üì≠ No hay transacciones registradas")
        else:
            for i, trans in enumerate(transactions, 1):
                trans_id = trans.get("transaction_id", "N/A")
                if len(trans_id) > 8:
                    trans_id = trans_id[:8] + "..."

                print(f"\n{i}. Transacci√≥n: {trans_id}")
                print(
                    f"   De: {trans['from_account_id']} ‚Üí Para: {trans['to_account_id']}"
                )
                print(f"   Monto: {trans['amount']} {trans['currency']}")
                print(f"   Estado: {trans['status']}")

        input("\nPresione Enter para continuar...")

    def server_status(self):
        """Estado del servidor"""
        self.clear_screen()
        self.print_header()
        print("üîç ESTADO DEL SERVIDOR")
        print("-" * 40)

        print("‚è≥ Verificando servidor...")

        if self.check_server_simple():
            print("‚úÖ Servidor: EN L√çNEA")

            # Intentar obtener informaci√≥n del health check
            health = self.api_call_simple("/health")
            if not health.get("error"):
                print(f"üè¶ Banco: {health.get('bank_name', 'N/A')}")
                print(f"üî¢ C√≥digo: {health.get('bank_code', 'N/A')}")
                print(f"üìä Estado: {health.get('status', 'N/A')}")
                print(f"üîß Versi√≥n: {health.get('version', 'N/A')}")
        else:
            print("‚ùå Servidor: FUERA DE L√çNEA")
            print("\nüí° Para iniciar el servidor, use la opci√≥n del men√∫ principal")

        input("\nPresione Enter para continuar...")

    def main_menu(self):
        """Men√∫ principal"""
        while True:
            self.clear_screen()
            self.print_header()

            # Verificar estado del servidor
            server_online = self.check_server_simple()
            status_icon = "‚úÖ" if server_online else "‚ùå"
            status_text = "EN L√çNEA" if server_online else "FUERA DE L√çNEA"
            print(f"üîç Estado del servidor: {status_icon} {status_text}")

            self.print_menu(
                "MEN√ö PRINCIPAL",
                [
                    "Iniciar servidor",
                    "Gesti√≥n de usuarios",
                    "Gesti√≥n de cuentas",
                    "Transferencias",
                    "Estado del servidor",
                ],
            )

            choice = input("Seleccione una opci√≥n: ").strip()

            if choice == "0":
                print("\nüëã ¬°Gracias por usar el Sistema Bancario SINPE!")
                if self.server_process:
                    print("üõë Deteniendo servidor...")
                    try:
                        self.server_process.terminate()
                    except:
                        pass
                break
            elif choice == "1":
                self.start_server()
            elif choice == "2":
                self.manage_users()
            elif choice == "3":
                self.manage_accounts()
            elif choice == "4":
                self.manage_transfers()
            elif choice == "5":
                self.server_status()
            else:
                self.show_message("Opci√≥n inv√°lida", "error")


def main():
    """Funci√≥n principal"""
    try:
        cli = SimpleBankingCLI()
        cli.main_menu()
    except KeyboardInterrupt:
        print("\n\nüëã Aplicaci√≥n terminada por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")


if __name__ == "__main__":
    main()
